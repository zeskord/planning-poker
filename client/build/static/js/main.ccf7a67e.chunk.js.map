{"version":3,"sources":["components/User.js","components/UserList.js","components/NavigationBar.js","components/PlanningPage.js","components/LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["User","props","badge","undefined","markVisible","itsMe","mark","secondary","pill","primary","Item","display","justifyContent","align","success","userName","id","UserList","my","users","map","user","name","marksVisible","currentUserName","NavigationBar","event","a","fetch","method","userData","isAuthenticated","setAuthState","expand","light","bg","Brand","href","Toggler","target","navbar","Nav","mr","Link","onClick","PlanningPage","intervalID","useRef","useState","userState","setUserState","markState","setMarkState","spectators","userIDs","spectatorIDs","state","setState","headers","Accept","response","json","isSpectator","prev","tick","current","setInterval","console","error","responseData","sendClick","reqBody","body","JSON","stringify","text","keyCode","useEffect","getUserData","clearInterval","lg","PrependText","Input","type","onChange","mark_temp","value","onKeyUp","src","width","height","pt","warning","danger","info","LoginForm","loginclick","result","userDataFromServer","htmlFor","mb","placeholder","Check","CheckInput","CheckLabel","App","Cookies","get","AuthState","style","minWidth","minHeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ccf7a67e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { ListGroup, Badge } from 'bootstrap-4-react';\r\n\r\nexport const User = (props) => {\r\n\r\n  var badge = undefined\r\n  if (!props.markVisible & props.itsMe & props.mark !== undefined) {\r\n    badge = <Badge secondary pill>{props.mark}</Badge>\r\n  } else if (props.markVisible) {\r\n    badge = <Badge primary pill>{props.mark}</Badge>\r\n  }\r\n\r\n  return (\r\n    <ListGroup.Item key={props.id} display=\"flex\" justifyContent=\"between\" align=\"items-center\"\r\n      success={props.mark !== undefined}>\r\n      {props.userName}\r\n      {badge !== undefined && badge}\r\n    </ListGroup.Item>\r\n  )\r\n}","// Представляет список активных пользователей.\r\nimport React from 'react';\r\nimport { ListGroup } from 'bootstrap-4-react';\r\nimport { User } from './User'\r\n\r\nexport const UserList = (props) => {\r\n\r\n  return (\r\n    <ListGroup my=\"2\">\r\n      {props.users.map(user => (\r\n        <User key={user.id} id={user.id} userName={user.name} mark={user.mark} markVisible={props.marksVisible}\r\n          itsMe={props.currentUserName === user.name}></User>\r\n      ))}\r\n    </ListGroup>\r\n  )\r\n}\r\n\r\n// export default class UserList extends Component {\r\n\r\n//   constructor(props) {\r\n//     super(props)\r\n\r\n//   }\r\n\r\n//   render() {\r\n//     var props = this.props\r\n//     return (\r\n//       <ListGroup my=\"2\">\r\n//         {props.users.map(user => (\r\n//           <User key={user.id} id={user.id} userName={user.name} mark={user.mark} markVisible={props.marksVisible}\r\n//             itsMe={props.currentUserName === user.name}></User>\r\n//         ))}\r\n//       </ListGroup>\r\n//     )\r\n//   }\r\n// }\r\n","import React from 'react'\r\nimport { Navbar, Nav, Collapse } from 'bootstrap-4-react'\r\n\r\nexport const NavigationBar = (props) => {\r\n\r\n  async function logoutClick(event) {\r\n    const url = '/logOut'\r\n    await fetch(url, { method: 'POST' })\r\n    // Процедура, переданная из самого корня.\r\n    const userData = {\r\n      userName: undefined,\r\n      isAuthenticated: false\r\n    }\r\n    props.setAuthState(userData)\r\n  }\r\n\r\n  async function fullReset(event) {\r\n    const url = '/fullReset'\r\n    await fetch(url, { method: 'POST' })\r\n  }\r\n  \r\n  return (\r\n    <Navbar expand=\"lg\" light bg=\"light\">\r\n      <Navbar.Brand href=\"#\">\r\n        {props.userName}\r\n      </Navbar.Brand>\r\n      <Navbar.Toggler target=\"#navbarSupportedContent\" />\r\n      <Collapse navbar id=\"navbarSupportedContent\">\r\n        <Navbar.Nav mr=\"auto\">\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#\" onClick={logoutClick}>Разлогиниться</Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#\" onClick={fullReset}>Полный сброс</Nav.Link>\r\n          </Nav.Item>\r\n        </Navbar.Nav>\r\n      </Collapse>\r\n    </Navbar>\r\n  )\r\n\r\n}\r\n\r\n// export default class NavigatonBar extends Component {\r\n//   constructor(props) {\r\n//     super(props)\r\n//     this.logoutClick = this.logoutClick.bind(this)\r\n//     this.fullReset = this.fullReset.bind(this)\r\n//   }\r\n\r\n//   async logoutClick(event) {\r\n//     const url = '/logOut'\r\n//     await fetch(url, { method: 'POST' })\r\n//     // Процедура, переданная из самого корня.\r\n//     this.props.setAuthState({ name: undefined }, false)\r\n//   }\r\n\r\n//   async fullReset(event) {\r\n//     const url = '/fullReset'\r\n//     await fetch(url, { method: 'POST' })\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <Navbar expand=\"lg\" light bg=\"light\">\r\n//         <Navbar.Brand href=\"#\">\r\n//           {this.props.userName}\r\n//         </Navbar.Brand>\r\n//         <Navbar.Toggler target=\"#navbarSupportedContent\" />\r\n//         <Collapse navbar id=\"navbarSupportedContent\">\r\n//           <Navbar.Nav mr=\"auto\">\r\n//             <Nav.Item>\r\n//               <Nav.Link href=\"#\" onClick={this.logoutClick}>Разлогиниться</Nav.Link>\r\n//             </Nav.Item>\r\n//             <Nav.Item>\r\n//               <Nav.Link href=\"#\" onClick={this.fullReset}>Полный сброс</Nav.Link>\r\n//             </Nav.Item>\r\n//           </Navbar.Nav>\r\n//         </Collapse>\r\n//       </Navbar>\r\n//     )\r\n//   }\r\n// }","import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  Container,\r\n  InputGroup,\r\n  Form,\r\n  Button,\r\n  BDiv,\r\n  Badge,\r\n  BImg,\r\n} from \"bootstrap-4-react\";\r\nimport { UserList } from \"./UserList\";\r\nimport { NavigationBar } from \"./NavigationBar\";\r\n//import { PopoverHelp } from './PopoverHelp'\r\n\r\nexport const PlanningPage = (props) => {\r\n  const intervalID = useRef(undefined);\r\n\r\n  const [userState, setUserState] = useState({\r\n    user: {}, // name, isSpectator\r\n  });\r\n  const [markState, setMarkState] = useState({\r\n    mark: undefined,\r\n  });\r\n  const [state, setState] = useState({\r\n    users: [], // Пользователи со всеми данными.\r\n    spectators: [], // Зрители со всеми данными.\r\n    userIDs: [], // Просто массив идентификаторов пользователей\r\n    spectatorIDs: [], // Просто массив идентификаторов зрителей\r\n    marksVisible: false, // Оценки вскрыты?\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Запрашиваем с сервера, как он видит текущего пользователя.\r\n    // Устанавливаем обработчик ожидания tick.\r\n    getUserData();\r\n    return () => {\r\n      clearInterval(intervalID.current);\r\n    };\r\n  }, [props]);\r\n\r\n  async function getUserData() {\r\n    try {\r\n      const url = \"/getUserData\";\r\n      const response = await fetch(url, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      });\r\n      const json = await response.json();\r\n      const user = {\r\n        name: json.user,\r\n        isSpectator: json.isSpectator,\r\n      };\r\n      setUserState((prev) => {\r\n        return {\r\n          ...prev,\r\n          user: user,\r\n        };\r\n      });\r\n      await tick();\r\n      intervalID.current = setInterval(tick, 2000);\r\n    } catch (error) {\r\n      console.error(\"Ошибка:\", error);\r\n    }\r\n  }\r\n\r\n  // Глобальный клиентский тик.\r\n  async function tick() {\r\n    try {\r\n      const url = \"/tick\";\r\n      const response = await fetch(url);\r\n      const responseData = await response.json();\r\n      setState((prev) => {\r\n        return {\r\n          ...prev,\r\n          users: responseData.users,\r\n          spectators: responseData.spectators,\r\n          marksVisible: responseData.marksVisible,\r\n        };\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Ошибка:\", error);\r\n    }\r\n  }\r\n\r\n  function markChange(event) {\r\n    var mark_temp = event.target.value;\r\n\r\n    setMarkState((prev) => {\r\n      return {\r\n        ...prev,\r\n        mark: mark_temp,\r\n      };\r\n    });\r\n  }\r\n\r\n  async function sendClick(event) {\r\n    try {\r\n      const url = \"/sendMark\";\r\n      const reqBody = {\r\n        user: userState.user.name,\r\n        mark: markState.mark,\r\n      };\r\n      const response = await fetch(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json;charset=utf-8\",\r\n        },\r\n        body: JSON.stringify(reqBody),\r\n      });\r\n      await response.text();\r\n      tick();\r\n    } catch (error) {\r\n      console.error(\"Ошибка:\", error);\r\n    }\r\n  }\r\n\r\n  async function markKeyUp(event) {\r\n    if (event.keyCode === 13) {\r\n      sendClick(event);\r\n    }\r\n  }\r\n\r\n  async function openClick(event) {\r\n    try {\r\n      const url = \"/showMarks\";\r\n      await fetch(url, { method: \"POST\" });\r\n      tick();\r\n    } catch (error) {\r\n      console.error(\"Ошибка:\", error);\r\n    }\r\n  }\r\n\r\n  async function clearMarksClick(event) {\r\n    try {\r\n      const url = \"/clearMarks\";\r\n      await fetch(url, { method: \"POST\" });\r\n      tick();\r\n    } catch (error) {\r\n      console.error(\"Ошибка:\", error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <BDiv bg=\"light\">\r\n      <NavigationBar\r\n        userName={userState.user.name}\r\n        setAuthState={props.setAuthState}\r\n      />\r\n      <Container>\r\n        <InputGroup lg my=\"2\">\r\n          <InputGroup.PrependText>Оценка</InputGroup.PrependText>\r\n          <Form.Input type=\"number\" onChange={markChange} onKeyUp={markKeyUp} />\r\n        </InputGroup>\r\n        <Button primary lg my=\"2\" onClick={sendClick}>\r\n          Отправить\r\n        </Button>\r\n        <UserList\r\n          users={state.users}\r\n          marksVisible={state.marksVisible}\r\n          currentUserName={userState.user.name}\r\n        />\r\n        <BImg my=\"2\" src={state.marksVisible ? \"eye.svg\" : \"eye-slash.svg\"} width=\"24\" height=\"24\" />\r\n        <BDiv pt=\"2\">\r\n          <Button success lg onClick={openClick}>\r\n            Вскрываемся\r\n          </Button>\r\n        </BDiv>\r\n        <BDiv my=\"2\">\r\n          <Button warning lg my=\"2\" onClick={clearMarksClick}>\r\n            Очистить оценки\r\n          </Button>\r\n        </BDiv>\r\n        <BDiv my=\"2\">\r\n          <Badge primary>0</Badge>\r\n          <Badge secondary>0.5</Badge>\r\n          <Badge success>1</Badge>\r\n          <Badge danger>2</Badge>\r\n          <Badge warning>3</Badge>\r\n          <Badge info>5</Badge>\r\n          <Badge primary>8</Badge>\r\n          <Badge secondary>13</Badge>\r\n          <Badge success>21</Badge>\r\n          <Badge danger>34</Badge>\r\n          <Badge warning>55</Badge>\r\n          <Badge info>89</Badge>\r\n          <Badge primary>144</Badge>\r\n          <Badge secondary>233</Badge>\r\n        </BDiv>\r\n      </Container>\r\n    </BDiv>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Container, InputGroup, Form, Button } from 'bootstrap-4-react';\r\n\r\nexport const LoginForm = (props) => {\r\n\r\n    var userName = \"\"\r\n    var isSpectator = false\r\n\r\n    const [state, setState] = useState({\r\n        userName: \"\",\r\n        isSpectator: false\r\n    });\r\n\r\n    async function loginclick() {\r\n        const reqBody = {\r\n            userName: state.userName,\r\n            isSpectator: state.isSpectator\r\n        }\r\n        const result = await fetch(\"/\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify(reqBody)\r\n        })\r\n        const userDataFromServer = await result.json()\r\n        const userData = {\r\n            userName: userDataFromServer.name,\r\n            isAuthenticated: true\r\n        }\r\n        props.setAuthState(userData)\r\n    }\r\n\r\n    function loginKeyUp(event) {\r\n        if (event.keyCode === 13) {\r\n            loginclick()\r\n        }\r\n    }\r\n\r\n    function userNameChange(event) {\r\n\r\n        userName = event.target.value\r\n        setState(prev => {\r\n            return {\r\n                ...prev,\r\n                userName: userName\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    function isSpectatorChange(event) {\r\n\r\n        isSpectator = event.target.value\r\n        setState(prev => {\r\n            return {\r\n                ...prev,\r\n                isSpectator: isSpectator\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <InputGroup>\r\n                <label htmlFor=\"userName\">Введите ваше имя</label>\r\n            </InputGroup>\r\n            <InputGroup mb=\"3\">\r\n                <Form.Input lg type=\"text\" id=\"userName\" value={state.userName} onChange={userNameChange}\r\n                    onKeyUp={loginKeyUp} placeholder=\"Имя пользователя\" />\r\n            </InputGroup>\r\n            <Form.Check mb=\"3\">\r\n                <Form.CheckInput type=\"checkbox\" id=\"isSpectator\" value={state.isSpectator} onChange={isSpectatorChange} />\r\n                <Form.CheckLabel htmlFor=\"isSpectator\">Я только посмотреть</Form.CheckLabel>\r\n            </Form.Check>\r\n            <InputGroup mb=\"3\">\r\n                <Button primary onClick={loginclick}>Войти</Button>\r\n            </InputGroup>\r\n        </Container >\r\n    )\r\n\r\n}","import React, { useState } from 'react'\r\nimport Cookies from 'universal-cookie'\r\nimport { BDiv } from 'bootstrap-4-react'\r\nimport { PlanningPage } from './components/PlanningPage'\r\nimport { LoginForm } from './components/LoginForm'\r\n\r\nexport const App = (props) => {\r\n\r\n    const style = {\r\n        minWidth: '100vw',\r\n        minHeight: '100vh'\r\n    }\r\n\r\n    const cookies = new Cookies();\r\n    var user = cookies.get(\"user\")\r\n    const isAuthenticated = (user !== undefined)\r\n\r\n    const [AuthState, setAuthState] = useState({\r\n        isAuthenticated: isAuthenticated,\r\n        isSpectator: isAuthenticated ? user.isSpectator : undefined,\r\n        userName: isAuthenticated ? user.name : undefined\r\n    })\r\n\r\n    return (\r\n        <BDiv bg=\"light\" style={style}>\r\n            {AuthState.isAuthenticated ? (\r\n                <PlanningPage setAuthState={setAuthState} />\r\n            )\r\n                :\r\n                (\r\n                    <LoginForm setAuthState={setAuthState} />\r\n                )}\r\n        </BDiv>\r\n    )\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}