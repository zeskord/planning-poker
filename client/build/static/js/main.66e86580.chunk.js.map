{"version":3,"sources":["components/User.js","components/UserList.js","components/NavigationBar.js","components/PlanningPage.js","components/LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["User","props","badge","undefined","markVisible","itsMe","mark","secondary","pill","primary","Item","key","id","display","justifyContent","align","success","userName","UserList","my","users","map","user","name","marksVisible","currentUserName","NavigationBar","event","a","fetch","method","userData","isAuthenticated","setAuthState","expand","light","bg","Brand","href","Toggler","target","navbar","Nav","mr","Link","onClick","PlanningPage","intervalID","useRef","useState","userState","setUserState","markState","setMarkState","spectators","userIDs","spectatorIDs","state","setState","headers","response","json","isSpectator","prev","tick","current","setInterval","console","error","responseData","sendClick","reqBody","body","JSON","stringify","text","keyCode","useEffect","getUserData","clearInterval","lg","PrependText","Input","type","onChange","mark_temp","value","onKeyUp","pt","warning","LoginForm","loginclick","result","userDataFromServer","htmlFor","mb","placeholder","Check","CheckInput","CheckLabel","App","Cookies","get","AuthState","style","minWidth","minHeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.66e86580.chunk.js","sourcesContent":["import React from 'react';\r\nimport { ListGroup, Badge } from 'bootstrap-4-react';\r\n\r\nexport const User = (props) => {\r\n\r\n  var badge = undefined\r\n  if (!props.markVisible & props.itsMe & props.mark !== undefined) {\r\n    badge = <Badge secondary pill>{props.mark}</Badge>\r\n  } else if (props.markVisible) {\r\n    badge = <Badge primary pill>{props.mark}</Badge>\r\n  }\r\n\r\n  return (\r\n    <ListGroup.Item key={props.id} display=\"flex\" justifyContent=\"between\" align=\"items-center\"\r\n      success={props.mark !== undefined}>\r\n      {props.userName}\r\n      {badge !== undefined && badge}\r\n    </ListGroup.Item>\r\n  )\r\n}","// Представляет список активных пользователей.\r\nimport React from 'react';\r\nimport { ListGroup } from 'bootstrap-4-react';\r\nimport { User } from './User'\r\n\r\nexport const UserList = (props) => {\r\n\r\n  return (\r\n    <ListGroup my=\"2\">\r\n      {props.users.map(user => (\r\n        <User key={user.id} id={user.id} userName={user.name} mark={user.mark} markVisible={props.marksVisible}\r\n          itsMe={props.currentUserName === user.name}></User>\r\n      ))}\r\n    </ListGroup>\r\n  )\r\n}\r\n\r\n// export default class UserList extends Component {\r\n\r\n//   constructor(props) {\r\n//     super(props)\r\n\r\n//   }\r\n\r\n//   render() {\r\n//     var props = this.props\r\n//     return (\r\n//       <ListGroup my=\"2\">\r\n//         {props.users.map(user => (\r\n//           <User key={user.id} id={user.id} userName={user.name} mark={user.mark} markVisible={props.marksVisible}\r\n//             itsMe={props.currentUserName === user.name}></User>\r\n//         ))}\r\n//       </ListGroup>\r\n//     )\r\n//   }\r\n// }\r\n","import React from 'react'\r\nimport { Navbar, Nav, Collapse } from 'bootstrap-4-react'\r\n\r\nexport const NavigationBar = (props) => {\r\n\r\n  async function logoutClick(event) {\r\n    const url = '/logOut'\r\n    await fetch(url, { method: 'POST' })\r\n    // Процедура, переданная из самого корня.\r\n    const userData = {\r\n      userName: undefined,\r\n      isAuthenticated: false\r\n    }\r\n    props.setAuthState(userData)\r\n  }\r\n\r\n  async function fullReset(event) {\r\n    const url = '/fullReset'\r\n    await fetch(url, { method: 'POST' })\r\n  }\r\n  \r\n  return (\r\n    <Navbar expand=\"lg\" light bg=\"light\">\r\n      <Navbar.Brand href=\"#\">\r\n        {props.userName}\r\n      </Navbar.Brand>\r\n      <Navbar.Toggler target=\"#navbarSupportedContent\" />\r\n      <Collapse navbar id=\"navbarSupportedContent\">\r\n        <Navbar.Nav mr=\"auto\">\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#\" onClick={logoutClick}>Разлогиниться</Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#\" onClick={fullReset}>Полный сброс</Nav.Link>\r\n          </Nav.Item>\r\n        </Navbar.Nav>\r\n      </Collapse>\r\n    </Navbar>\r\n  )\r\n\r\n}\r\n\r\n// export default class NavigatonBar extends Component {\r\n//   constructor(props) {\r\n//     super(props)\r\n//     this.logoutClick = this.logoutClick.bind(this)\r\n//     this.fullReset = this.fullReset.bind(this)\r\n//   }\r\n\r\n//   async logoutClick(event) {\r\n//     const url = '/logOut'\r\n//     await fetch(url, { method: 'POST' })\r\n//     // Процедура, переданная из самого корня.\r\n//     this.props.setAuthState({ name: undefined }, false)\r\n//   }\r\n\r\n//   async fullReset(event) {\r\n//     const url = '/fullReset'\r\n//     await fetch(url, { method: 'POST' })\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <Navbar expand=\"lg\" light bg=\"light\">\r\n//         <Navbar.Brand href=\"#\">\r\n//           {this.props.userName}\r\n//         </Navbar.Brand>\r\n//         <Navbar.Toggler target=\"#navbarSupportedContent\" />\r\n//         <Collapse navbar id=\"navbarSupportedContent\">\r\n//           <Navbar.Nav mr=\"auto\">\r\n//             <Nav.Item>\r\n//               <Nav.Link href=\"#\" onClick={this.logoutClick}>Разлогиниться</Nav.Link>\r\n//             </Nav.Item>\r\n//             <Nav.Item>\r\n//               <Nav.Link href=\"#\" onClick={this.fullReset}>Полный сброс</Nav.Link>\r\n//             </Nav.Item>\r\n//           </Navbar.Nav>\r\n//         </Collapse>\r\n//       </Navbar>\r\n//     )\r\n//   }\r\n// }","import React, { useState, useEffect, useRef } from 'react'\r\nimport { Container, InputGroup, Form, Button, BDiv } from 'bootstrap-4-react'\r\nimport { UserList } from './UserList'\r\nimport { NavigationBar } from './NavigationBar'\r\n\r\nexport const PlanningPage = (props) => {\r\n\r\n    const intervalID = useRef(undefined)\r\n\r\n    const [userState, setUserState] = useState({\r\n        user: {} // name, isSpectator\r\n    })\r\n    const [markState, setMarkState] = useState({\r\n        mark: undefined\r\n    })\r\n    const [state, setState] = useState({\r\n        users: [], // Пользователи со всеми данными.\r\n        spectators: [], // Зрители со всеми данными.\r\n        userIDs: [], // Просто массив идентификаторов пользователей\r\n        spectatorIDs: [], // Просто массив идентификаторов зрителей\r\n        marksVisible: false, // Оценки вскрыты?\r\n    })\r\n\r\n    useEffect(\r\n        () => {\r\n            // Запрашиваем с сервера, как он видит текущего пользователя.\r\n            // Устанавливаем обработчик ожидания tick.\r\n            getUserData()\r\n            return () => { clearInterval(intervalID.current) }\r\n        }, [props]\r\n    )\r\n\r\n    async function getUserData() {\r\n        try {\r\n            const url = '/getUserData'\r\n            const response = await fetch(url, {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                }\r\n            })\r\n            const json = await response.json()\r\n            const user = {\r\n                name: json.user,\r\n                isSpectator: json.isSpectator\r\n            }\r\n            setUserState(prev => {\r\n                return {\r\n                    ...prev,\r\n                    user: user\r\n                }\r\n            })\r\n            await tick()\r\n            intervalID.current = setInterval(tick, 2000);\r\n        } catch (error) {\r\n            console.error('Ошибка:', error);\r\n        }\r\n    }\r\n\r\n    // Глобальный клиентский тик. \r\n    async function tick() {\r\n        try {\r\n            const url = '/tick'\r\n            const response = await fetch(url)\r\n            const responseData = await response.json()\r\n            setState(prev => {\r\n                return {\r\n                    ...prev,\r\n                    users: responseData.users,\r\n                    spectators: responseData.spectators,\r\n                    marksVisible: responseData.marksVisible\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.error('Ошибка:', error);\r\n        }\r\n    }\r\n\r\n    function markChange(event) {\r\n        var mark_temp = event.target.value\r\n\r\n        setMarkState(prev => {\r\n            return {\r\n                ...prev,\r\n                mark: mark_temp\r\n            }\r\n        })\r\n    }\r\n\r\n    async function sendClick(event) {\r\n        try {\r\n            const url = '/sendMark'\r\n            const reqBody = {\r\n                user: userState.user.name,\r\n                mark: markState.mark\r\n            }\r\n            const response = await fetch(url, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json;charset=utf-8'\r\n                },\r\n                body: JSON.stringify(reqBody)\r\n            })\r\n            await response.text()\r\n            tick()\r\n        } catch (error) {\r\n            console.error('Ошибка:', error);\r\n        }\r\n    }\r\n\r\n    async function markKeyUp(event) {\r\n        if (event.keyCode === 13) {\r\n            sendClick(event)\r\n        }\r\n    }\r\n\r\n    async function openClick(event) {\r\n        try {\r\n            const url = '/showMarks'\r\n            await fetch(url, { method: 'POST' })\r\n            tick()\r\n        } catch (error) {\r\n            console.error('Ошибка:', error);\r\n        }\r\n    }\r\n\r\n    async function clearMarksClick(event) {\r\n        try {\r\n            const url = '/clearMarks'\r\n            await fetch(url, { method: 'POST' })\r\n            tick()\r\n        } catch (error) {\r\n            console.error('Ошибка:', error);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <BDiv bg=\"light\">\r\n            <NavigationBar userName={userState.user.name} setAuthState={props.setAuthState} />\r\n            <Container>\r\n                <InputGroup lg my=\"2\">\r\n                    <InputGroup.PrependText>Оценка</InputGroup.PrependText>\r\n                    <Form.Input type=\"number\" onChange={markChange} onKeyUp={markKeyUp} />\r\n                </InputGroup>\r\n                <Button primary lg my=\"2\" onClick={sendClick}>Отправить</Button>\r\n                <UserList users={state.users} marksVisible={state.marksVisible} currentUserName={userState.user.name} />\r\n                <BDiv pt=\"2\">\r\n                    <Button success lg onClick={openClick}>Вскрываемся</Button>\r\n                </BDiv>\r\n                <BDiv my=\"2\">\r\n                    <Button warning lg my=\"2\" onClick={clearMarksClick}>Очистить оценки</Button>\r\n                </BDiv>\r\n            </Container>\r\n        </BDiv>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { Container, InputGroup, Form, Button } from 'bootstrap-4-react';\r\n\r\nexport const LoginForm = (props) => {\r\n\r\n    var userName = \"\"\r\n    var isSpectator = false\r\n\r\n    const [state, setState] = useState({\r\n        userName: \"\",\r\n        isSpectator: false\r\n    });\r\n\r\n    async function loginclick() {\r\n        const reqBody = {\r\n            userName: state.userName,\r\n            isSpectator: state.isSpectator\r\n        }\r\n        const result = await fetch(\"/\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify(reqBody)\r\n        })\r\n        const userDataFromServer = await result.json()\r\n        const userData = {\r\n            userName: userDataFromServer.name,\r\n            isAuthenticated: true\r\n        }\r\n        props.setAuthState(userData)\r\n    }\r\n\r\n    function loginKeyUp(event) {\r\n        if (event.keyCode === 13) {\r\n            loginclick()\r\n        }\r\n    }\r\n\r\n    function userNameChange(event) {\r\n\r\n        userName = event.target.value\r\n        setState(prev => {\r\n            return {\r\n                ...prev,\r\n                userName: userName\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    function isSpectatorChange(event) {\r\n\r\n        isSpectator = event.target.value\r\n        setState(prev => {\r\n            return {\r\n                ...prev,\r\n                isSpectator: isSpectator\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <InputGroup>\r\n                <label htmlFor=\"userName\">Введите ваше имя</label>\r\n            </InputGroup>\r\n            <InputGroup mb=\"3\">\r\n                <Form.Input lg type=\"text\" id=\"userName\" value={state.userName} onChange={userNameChange}\r\n                    onKeyUp={loginKeyUp} placeholder=\"Имя пользователя\" />\r\n            </InputGroup>\r\n            <Form.Check mb=\"3\">\r\n                <Form.CheckInput type=\"checkbox\" id=\"isSpectator\" value={state.isSpectator} onChange={isSpectatorChange} />\r\n                <Form.CheckLabel htmlFor=\"isSpectator\">Я только посмотреть</Form.CheckLabel>\r\n            </Form.Check>\r\n            <InputGroup mb=\"3\">\r\n                <Button primary onClick={loginclick}>Войти</Button>\r\n            </InputGroup>\r\n        </Container >\r\n    )\r\n\r\n}","import React, { useState } from 'react'\r\nimport Cookies from 'universal-cookie'\r\nimport { BDiv } from 'bootstrap-4-react'\r\nimport { PlanningPage } from './components/PlanningPage'\r\nimport { LoginForm } from './components/LoginForm'\r\n\r\nexport const App = (props) => {\r\n\r\n    const style = {\r\n        minWidth: '100vw',\r\n        minHeight: '100vh'\r\n    }\r\n\r\n    const cookies = new Cookies();\r\n    var user = cookies.get(\"user\")\r\n    const isAuthenticated = (user !== undefined)\r\n\r\n    const [AuthState, setAuthState] = useState({\r\n        isAuthenticated: isAuthenticated,\r\n        isSpectator: isAuthenticated ? user.isSpectator : undefined,\r\n        userName: isAuthenticated ? user.name : undefined\r\n    })\r\n\r\n    return (\r\n        <BDiv bg=\"light\" style={style}>\r\n            {AuthState.isAuthenticated ? (\r\n                <PlanningPage setAuthState={setAuthState} />\r\n            )\r\n                :\r\n                (\r\n                    <LoginForm setAuthState={setAuthState} />\r\n                )}\r\n        </BDiv>\r\n    )\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}