{"version":3,"sources":["components/User.js","components/UserList.js","components/NavigationBar.js","components/PlanningPage.js","components/LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["User","props","badge","undefined","this","markVisible","itsMe","mark","secondary","pill","primary","Item","display","justifyContent","align","success","userName","Component","UserList","my","users","map","user","key","id","name","marksVisible","currentUserName","NavigatonBar","logoutClick","bind","fullReset","event","fetch","method","setAuthState","expand","light","bg","Brand","href","Toggler","target","navbar","Nav","mr","Link","onClick","PlanningPage","state","spectators","userIDs","spectatorIDs","tick","markChange","sendClick","openClick","clearMarksClick","markKeyUp","response","json","isSpectator","setState","intervalID","setInterval","clearInterval","responseData","value","reqBody","headers","body","JSON","stringify","text","keyCode","lg","PrependText","Input","type","onChange","onKeyUp","warning","LoginForm","loginclick","loginKeyUp","userNameChange","isSpectatorChange","result","userData","htmlFor","mb","placeholder","Check","CheckInput","CheckLabel","App","Cookies","get","isAuthenticated","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4570ddfc.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport { ListGroup, Badge } from 'bootstrap-4-react';\r\n\r\nexport default class User extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n  }\r\n\r\n  render() {\r\n    var badge = undefined\r\n    if (!this.props.markVisible & this.props.itsMe & this.props.mark !== undefined) {\r\n      badge = <Badge secondary pill>{this.props.mark}</Badge>\r\n    } else if (this.props.markVisible) {\r\n      badge = <Badge primary pill>{this.props.mark}</Badge>\r\n    }\r\n    return (\r\n      <ListGroup.Item display=\"flex\" justifyContent=\"between\" align=\"items-center\" success={this.props.mark !== undefined}>\r\n        {this.props.userName}\r\n        {badge !== undefined && badge}\r\n      </ListGroup.Item>\r\n    )\r\n  }\r\n}\r\n","// Представляет список активных пользователей.\r\nimport React, { Component } from 'react';\r\nimport { ListGroup } from 'bootstrap-4-react';\r\nimport User from './User'\r\n\r\nexport default class UserList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ListGroup my=\"2\">\r\n        {this.props.users.map(user => (\r\n          <User key={user.id} userName={user.name} mark={user.mark} markVisible={this.props.marksVisible}\r\n            itsMe={this.props.currentUserName === user.name}></User>\r\n        ))}\r\n      </ListGroup>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Navbar, Nav, Collapse } from 'bootstrap-4-react';\r\n\r\nexport default class NavigatonBar extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.logoutClick = this.logoutClick.bind(this)\r\n    this.fullReset = this.fullReset.bind(this)\r\n  }\r\n\r\n  async logoutClick(event) {\r\n    const url = '/logOut'\r\n    await fetch(url, { method: 'POST' })\r\n    // Процедура, переданная из самого корня.\r\n    this.props.setAuthState({ name: undefined }, false)\r\n  }\r\n\r\n  async fullReset(event) {\r\n    const url = '/fullReset'\r\n    await fetch(url, { method: 'POST' })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Navbar expand=\"lg\" light bg=\"light\">\r\n        <Navbar.Brand href=\"#\">\r\n          {this.props.userName}\r\n        </Navbar.Brand>\r\n        <Navbar.Toggler target=\"#navbarSupportedContent\" />\r\n        <Collapse navbar id=\"navbarSupportedContent\">\r\n          <Navbar.Nav mr=\"auto\">\r\n            <Nav.Item>\r\n              <Nav.Link href=\"#\" onClick={this.logoutClick}>Разлогиниться</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link href=\"#\" onClick={this.fullReset}>Полный сброс</Nav.Link>\r\n            </Nav.Item>\r\n          </Navbar.Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    )\r\n  }\r\n}","import React, { Component, Fragment } from 'react'\r\nimport { Container, InputGroup, Form, Button, BDiv } from 'bootstrap-4-react'\r\nimport UserList from './UserList'\r\nimport NavigationBar from './NavigationBar'\r\n\r\nexport default class PlanningPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        // Инициализируем клиентский стейт.\r\n        this.state = {\r\n            user: {}, // name, isSpectator\r\n            users: [], // Пользователи со всеми данными.\r\n            spectators: [], // Зрители со всеми данными.\r\n            userIDs: [], // Просто массив идентификаторов пользователей\r\n            spectatorIDs: [], // Просто массив идентификаторов зрителей\r\n            marksVisible: false, // Оценки вскрыты?\r\n            mark: undefined // Оценка в поле ввода\r\n        }\r\n        this.tick = this.tick.bind(this)\r\n        this.markChange = this.markChange.bind(this)\r\n        this.sendClick = this.sendClick.bind(this)\r\n        this.openClick = this.openClick.bind(this)\r\n        this.clearMarksClick = this.clearMarksClick.bind(this)\r\n        this.markKeyUp = this.markKeyUp.bind(this)\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const url = '/getUserData'\r\n        const response = await fetch(url)\r\n        const json = await response.json()\r\n        const user = {\r\n            name: json.user,\r\n            isSpectator: json.isSpectator\r\n        }\r\n        this.setState({ user: user })\r\n        await this.tick()\r\n        this.intervalID = setInterval(this.tick, 5000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalID);\r\n    }\r\n\r\n    // Глобальный клиентский тик. \r\n    async tick() {\r\n        try {\r\n            const url = '/tick'\r\n            const response = await fetch(url)\r\n            const responseData = await response.json()\r\n            this.setState(responseData)\r\n        } catch (error) {\r\n            //console.error('Ошибка:', error);\r\n        }\r\n    }\r\n\r\n    markChange(event) {\r\n        this.setState({ mark: event.target.value })\r\n    }\r\n\r\n    async sendClick(event) {\r\n        const url = '/sendMark'\r\n        const reqBody = {\r\n            user: this.state.user.name,\r\n            mark: this.state.mark\r\n        }\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify(reqBody)\r\n        })\r\n        await response.text()\r\n        this.tick()\r\n    }\r\n\r\n    async markKeyUp(event) {\r\n        if (event.keyCode === 13) {\r\n            this.sendClick(event)\r\n        }\r\n    }\r\n\r\n    async openClick(event) {\r\n        const url = '/showMarks'\r\n        await fetch(url, { method: 'POST' })\r\n        this.tick()\r\n    }\r\n\r\n    async clearMarksClick(event) {\r\n        const url = '/clearMarks'\r\n        await fetch(url, { method: 'POST' })\r\n        this.tick()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <BDiv bg=\"light\">\r\n                    <NavigationBar userName={this.state.user.name} setAuthState={this.props.setAuthState} />\r\n                    <Container>\r\n                        <InputGroup lg my=\"2\">\r\n                            <InputGroup.PrependText>Оценка</InputGroup.PrependText>\r\n                            <Form.Input type=\"number\" onChange={this.markChange} onKeyUp={this.markKeyUp} />\r\n                        </InputGroup>\r\n                        <Button primary lg my=\"2\" onClick={this.sendClick}>Отправить</Button>\r\n                        <UserList users={this.state.users} marksVisible={this.state.marksVisible} currentUserName={this.state.user.name} />\r\n                        <BDiv my=\"2\">\r\n                            <Button success lg onClick={this.openClick}>Вскрываемся</Button>\r\n                        </BDiv>\r\n                        <BDiv my=\"2\">\r\n                            <Button warning lg my=\"2\" onClick={this.clearMarksClick}>Очистить оценки</Button>\r\n                        </BDiv>\r\n                    </Container>\r\n                </BDiv>\r\n            </Fragment>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Container, InputGroup, Form, Button } from 'bootstrap-4-react';\r\n\r\nexport default class LoginForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            userName: \"\",\r\n            isSpectator: false\r\n        }\r\n\r\n        this.loginclick = this.loginclick.bind(this)\r\n        this.loginKeyUp = this.loginKeyUp.bind(this)\r\n        this.userNameChange = this.userNameChange.bind(this)\r\n        this.isSpectatorChange = this.isSpectatorChange.bind(this)\r\n    }\r\n\r\n    async loginclick() {\r\n        const reqBody = {\r\n            userName: this.state.userName,\r\n            isSpectator: this.state.isSpectator\r\n        }\r\n        const result = await fetch(\"/\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify(reqBody)\r\n        })\r\n        const userData = await result.json()\r\n        this.props.setAuthState(userData, true)\r\n    }\r\n\r\n    loginKeyUp(event) {\r\n        if (event.keyCode === 13) {\r\n            this.loginclick()\r\n        }\r\n    }\r\n\r\n    userNameChange(event) {\r\n        this.setState({ userName: event.target.value });\r\n    }\r\n\r\n    isSpectatorChange(event) {\r\n        this.setState({ isSpectator: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <InputGroup>\r\n                    <label htmlFor=\"userName\">Введите ваше имя</label>\r\n                </InputGroup>\r\n                <InputGroup mb=\"3\">\r\n                    <Form.Input lg type=\"text\" id=\"userName\" value={this.state.userName} onChange={this.userNameChange}\r\n                        onKeyUp={this.loginKeyUp} placeholder=\"Имя пользователя\" />\r\n                </InputGroup>\r\n                <Form.Check mb=\"3\">\r\n                    <Form.CheckInput type=\"checkbox\" id=\"isSpectator\" value={this.state.isSpectator} onChange={this.isSpectatorChange} />\r\n                    <Form.CheckLabel htmlFor=\"isSpectator\">Я только посмотреть</Form.CheckLabel>\r\n                </Form.Check>\r\n                <InputGroup mb=\"3\">\r\n                    <Button primary onClick={this.loginclick}>Войти</Button>\r\n                </InputGroup>\r\n            </Container >\r\n        )\r\n    }\r\n}","import React, { Component, Fragment } from 'react'\r\nimport Cookies from 'universal-cookie'\r\n\r\nimport PlanningPage from './components/PlanningPage'\r\nimport LoginForm from './components/LoginForm'\r\n\r\nexport default class App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const cookies = new Cookies();\r\n        var user = cookies.get(\"user\")\r\n        const isAuthenticated = (user !== undefined)\r\n\r\n        this.state = {\r\n            isAuthenticated: isAuthenticated,\r\n            isSpectator: isAuthenticated ? user.isSpectator : undefined,\r\n            userName: isAuthenticated ? user.name : undefined\r\n        }\r\n        this.setAuthState = this.setAuthState.bind(this)\r\n    }\r\n\r\n    setAuthState(userData, isAuthenticated) {\r\n        console.log(this.state.isAuthenticated)\r\n        this.setState({\r\n            userName: userData.name,\r\n            isAuthenticated: isAuthenticated\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                {this.state.isAuthenticated ? (\r\n                    <PlanningPage setAuthState={this.setAuthState}/>\r\n                )\r\n                    :\r\n                    (\r\n                        <LoginForm setAuthState={this.setAuthState} />\r\n                    )}\r\n            </Fragment>\r\n        )\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}