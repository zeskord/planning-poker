{"version":3,"sources":["components/User.js","components/UserList.js","components/Spectator.js","components/SpectatorList.js","components/NavigationBar.js","components/PokerCard.js","components/PlanningPage.js","components/LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["User","props","badge","undefined","markVisible","itsMe","mark","Badge","variant","pill","className","ListGroup","Item","display","align","userName","id","UserList","users","map","user","name","marksVisible","currentUserName","Spectator","SpectatorList","style","fontSize","spectators","NavigationBar","event","a","fetch","method","userData","isAuthenticated","setAuthState","Navbar","expand","bg","Brand","href","Toggle","target","Collapse","Nav","Link","onClick","PokerCard","title","Card","toLowerCase","text","width","Body","Title","key","PlanningPage","intervalID","useRef","useState","userState","setUserState","setMark","markClient","setMarkClient","show","setShow","setMarksVisible","userIDs","spectatorIDs","state","setState","list","setSpectators","headers","Accept","response","json","isSpectator","prev","tick","current","setInterval","console","error","responseData","sendMark","reqBody","body","JSON","stringify","keyCode","modalOnSelect","selectedValue","mark_temp","useEffect","getUserData","clearInterval","myUserDataOnServer","find","us","handleClose","Container","InputGroup","size","Prepend","Text","FormControl","type","onChange","value","onKeyUp","Append","Button","Image","src","length","Header","Modal","onHide","backdrop","keyboard","closeButton","CardDeck","Footer","LoginForm","loginclick","result","userDataFromServer","placeholder","aria-label","aria-describedby","FormCheck","FormCheckInput","FormCheckLabel","htmlFor","App","Cookies","get","AuthState","minWidth","minHeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"wRAIaA,EAAO,SAACC,GAEnB,IAAIC,OAAQC,EAOZ,OANKF,EAAMG,YAAcH,EAAMI,WAAuBF,IAAfF,EAAMK,KAC3CJ,EAAQ,cAACK,EAAA,EAAD,CAAOC,QAAQ,YAAYC,MAAI,EAACC,UAAU,OAA1C,SAAkDT,EAAMK,OACvDL,EAAMG,cACfF,EAAQ,cAACK,EAAA,EAAD,CAAOC,QAAQ,UAAUC,MAAI,EAACC,UAAU,OAAxC,SAAgDT,EAAMK,QAI9D,cAACK,EAAA,EAAUC,KAAX,CAA+BC,QAAQ,OAAOC,MAAM,eAAeJ,UAAU,0BAC3EF,aAA2BL,IAAfF,EAAMK,KAAqB,UAAY,GADrD,SAEI,sBAAKI,UAAU,iCAAf,UACGT,EAAMc,cACIZ,IAAVD,GAAuBA,MAJTD,EAAMe,KCTlBC,EAAW,SAAChB,GACvB,OACE,cAACU,EAAA,EAAD,CAAWD,UAAU,OAArB,SACGT,EAAMiB,MAAMC,KAAI,SAACC,GAAD,OACf,cAAC,EAAD,CAEEJ,GAAII,EAAKJ,GACTD,SAAUK,EAAKC,KACff,KAAMc,EAAKd,KACXF,YAAaH,EAAMqB,aACnBjB,MAAOJ,EAAMsB,kBAAoBH,EAAKC,MALjCD,EAAKJ,UCPPQ,EAAY,SAACvB,GAExB,OACE,cAACU,EAAA,EAAUC,KAAX,CAA+BC,QAAQ,OAAOC,MAAM,eAAeJ,UAAU,+BAA+BF,QAAQ,QAApH,SACI,qBAAKE,UAAU,iCAAf,SACGT,EAAMc,YAFQd,EAAMe,KCDlBS,EAAgB,SAACxB,GAC5B,OACE,cAACU,EAAA,EAAD,CAAWe,MAAO,CAACC,SAAU,SAA7B,SACG1B,EAAM2B,WAAWT,KAAI,SAACC,GAAD,OACpB,cAAC,EAAD,CAEEJ,GAAII,EAAKJ,GACTD,SAAUK,EAAKC,MAFVD,EAAKJ,U,gBCNPa,EAAgB,SAAC5B,GAAU,4CAEtC,WAA2B6B,GAA3B,eAAAC,EAAA,4DACc,UADd,SAEQC,MADM,UACK,CAAEC,OAAQ,SAF7B,OAIQC,EAAW,CACfnB,cAAUZ,EACVgC,iBAAiB,GAEnBlC,EAAMmC,aAAaF,GARrB,4CAFsC,kEAatC,WAAyBJ,GAAzB,SAAAC,EAAA,4DACc,aADd,SAEQC,MADM,aACK,CAAEC,OAAQ,SAF7B,4CAbsC,sBAkBtC,OACE,eAACI,EAAA,EAAD,CAAQC,OAAO,KAAKC,GAAG,QAAvB,UACE,cAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,IAAnB,SACGxC,EAAMc,WAET,cAACsB,EAAA,EAAOK,OAAR,CAAeC,OAAO,4BACtB,cAACN,EAAA,EAAOO,SAAR,CAAiB5B,GAAG,yBAApB,SACE,eAAC6B,EAAA,EAAD,CAAKnC,UAAU,UAAf,UACE,cAACmC,EAAA,EAAIC,KAAL,CAAUL,KAAK,IAAIM,QA1BY,SAAD,mCA0B9B,4FACA,cAACF,EAAA,EAAIC,KAAL,CAAUL,KAAK,IAAIM,QA3BW,4CA2B9B,0F,QC5BGC,EAAY,SAAC/C,GAAU,4CAEhC,sBAAA8B,EAAA,sEACU9B,EAAM8C,QAAQ9C,EAAMgD,OAD9B,4CAFgC,sBAMhC,OACI,cAACC,EAAA,EAAD,CACAxC,UAAU,mBACV6B,GAAItC,EAAMO,QAAQ2C,cAGlBC,KAAsC,UAAhCnD,EAAMO,QAAQ2C,cAA4B,OAAS,QACzDzB,MAAO,CAAE2B,MAAO,SAChBN,QAd6B,WAAD,gCAO5B,SAUA,cAACG,EAAA,EAAKI,KAAN,UACI,cAACJ,EAAA,EAAKK,MAAN,CAAY7C,UAAU,eACtBgB,MAAO,CAAEC,SAAU,QADnB,SAC8B1B,EAAMgD,WATnChD,EAAMuD,M,gBCCNC,EAAe,SAACxD,GAC3B,IAAMyD,EAAaC,sBAAOxD,GADW,EAIHyD,mBAAS,CACzCxC,KAAM,KAL6B,mBAI9ByC,EAJ8B,KAInBC,EAJmB,OAUbF,wBAASzD,GAVI,mBAU9BG,EAV8B,KAUxByD,EAVwB,OAaDH,wBAASzD,GAbR,mBAa9B6D,EAb8B,KAalBC,EAbkB,OAgBbL,oBAAS,GAhBI,mBAgB9BM,EAhB8B,KAgBxBC,EAhBwB,OAkBGP,oBAAS,GAlBZ,mBAkB9BtC,EAlB8B,KAkBhB8C,EAlBgB,OAoBXR,mBAAS,CACjC1C,MAAO,GACPU,WAAY,GACZyC,QAAS,GACTC,aAAc,GACdhD,cAAc,IAzBqB,mBAoB9BiD,EApB8B,KAoBvBC,EApBuB,OA4BDZ,mBAAS,CAAEa,KAAM,KA5BhB,mBA4B9B7C,EA5B8B,KA4BlB8C,EA5BkB,iDAsErC,gCAAA3C,EAAA,sEAEgB,eAFhB,SAG2BC,MADX,eACsB,CAChC2C,QAAS,CACP,eAAgB,mBAChBC,OAAQ,sBANhB,cAGUC,EAHV,gBASuBA,EAASC,OAThC,cASUA,EATV,OAUU1D,EAAO,CACXC,KAAMyD,EAAK1D,KACX2D,YAAaD,EAAKC,aAEpBjB,GAAa,SAACkB,GACZ,OAAO,2BACFA,GADL,IAEE5D,KAAMA,OAjBd,UAoBU6D,IApBV,QAqBIvB,EAAWwB,QAAUC,YAAYF,EAAM,KArB3C,kDAuBIG,QAAQC,MAAM,wCAAd,MAvBJ,2DAtEqC,+BAkGtBJ,IAlGsB,2EAkGrC,8BAAAlD,EAAA,sEAEgB,QAFhB,SAG2BC,MADX,SAFhB,cAGU6C,EAHV,gBAI+BA,EAASC,OAJxC,OAIUQ,EAJV,OAKId,GAAS,SAACQ,GACR,OAAO,2BACFA,GADL,IAEE9D,MAAOoE,EAAapE,WAGxBwD,GAAc,SAACM,GACb,OAAO,2BACFA,GADL,IAEEP,KAAMa,EAAa1D,gBAGvBwC,EAAgBkB,EAAahE,cAjBjC,kDAmBI8D,QAAQC,MAAM,wCAAd,MAnBJ,2DAlGqC,+BA8HtBE,IA9HsB,2EA8HrC,8BAAAxD,EAAA,sEAGgB,YACNyD,EAAU,CACdpE,KAAMyC,EAAUzC,KAAKC,KACrBf,KAAM0D,GANZ,SAS2BhC,MANX,YAMsB,CAChCC,OAAQ,OACR0C,QAAS,CACP,eAAgB,kCAElBc,KAAMC,KAAKC,UAAUH,KAd3B,cASUX,EATV,gBAgBUA,EAASzB,OAhBnB,wBAiBU6B,IAjBV,0DAmBIG,QAAQC,MAAM,wCAAd,MAnBJ,2DA9HqC,kEAqJrC,WAAyBvD,GAAzB,SAAAC,EAAA,sDACwB,KAAlBD,EAAM8D,SACRL,IAFJ,4CArJqC,oEA2JrC,WAAyBzD,GAAzB,SAAAC,EAAA,sEAEgB,aAFhB,SAGUC,MADM,aACK,CAAEC,OAAQ,SAH/B,OAIIgD,IAJJ,gDAMIG,QAAQC,MAAM,wCAAd,MANJ,0DA3JqC,oEAqKrC,WAA+BvD,GAA/B,SAAAC,EAAA,sEAEgB,cAFhB,SAGUC,MADM,cACK,CAAEC,OAAQ,SAH/B,OAIIgD,IAJJ,gDAMIG,QAAQC,MAAM,wCAAd,MANJ,0DArKqC,oEA+KrC,WAA0BvD,GAA1B,SAAAC,EAAA,sDACE,IACEoC,GAAQ,GACR,MAAOkB,GACPD,QAAQC,MAAM,wCAAWA,GAJ7B,4CA/KqC,+BAuLtBQ,GAvLsB,iFAuLrC,WAA6BC,GAA7B,eAAA/D,EAAA,sDACEoC,GAAQ,GAGRF,EADI8B,EAAYD,GAEhB/B,EAAQgC,GALV,4CAvLqC,oEA+LrC,sBAAAhE,EAAA,sEACQgC,EAAQC,GADhB,4CA/LqC,sBA8BrCgC,qBAAU,WAIR,OAlCmC,mCAiCnCC,GACO,WACLC,cAAcxC,EAAWwB,YAE1B,CAACjF,IAEJ+F,qBAAU,gBAEK7F,IAATG,GACFiF,MAED,CAACjF,IAEJ0F,qBAAU,cAEP,CAAChC,IAGJgC,qBAAU,WAGR,IAAIG,EAAqB5B,EAAMrD,MAAMkF,MACnC,SAACC,GAAD,OAAQA,EAAGhF,OAASwC,EAAUzC,KAAKC,aAGZlB,IAAvBgG,QAC4BhG,IAA5BgG,EAAmB7F,WACVH,IAATG,GAEAyD,OAAQ5D,KAMT,CAACoE,IA+HJ,IAAM+B,GAAc,kBAAMnC,GAAQ,IAGlC,OACE,sBAAK5B,GAAG,QAAR,UACE,cAAC,EAAD,CACExB,SAAU8C,EAAUzC,KAAKC,KACzBe,aAAcnC,EAAMmC,eAEtB,eAACmE,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAY9F,UAAU,OAAO+F,KAAK,KAAlC,UACE,cAACD,EAAA,EAAWE,QAAZ,UACE,cAACF,EAAA,EAAWG,KAAZ,qDAEF,cAACC,EAAA,EAAD,CACEC,KAAK,SACLC,SA1FV,SAAoBhF,GAClB,IAAIiE,EAAYjE,EAAMa,OAAOoE,MAC7B9C,EAAc8B,IAyFNiB,QApN2B,4CAqN3BD,MAAO/C,GAAc,KAEvB,cAACwC,EAAA,EAAWS,OAAZ,UACE,cAACC,EAAA,EAAD,CAAQlG,GAAG,eAAeR,QAAQ,YAAYuC,QAxNnB,6CAwN3B,wBAKJ,cAACmE,EAAA,EAAD,CACE1G,QAAQ,UACRiG,KAAK,KACL/F,UAAU,OACVqC,QAjO6B,4CA6N/B,oEAQA,cAAC,EAAD,CACE7B,MAAOqD,EAAMrD,MACbI,aAAcA,EACdC,gBAAiBsC,EAAUzC,KAAKC,OAElC,cAAC8F,EAAA,EAAD,CACEzG,UAAU,OACV0G,IAAK9F,EAAe,UAAY,kBAIlC,qBAAKZ,UAAU,OAAf,SACE,cAACwG,EAAA,EAAD,CAAQ1G,QAAQ,UAAUiG,KAAK,KAAK1D,QAjPP,6CAiP7B,kFAIF,qBAAKrC,UAAU,OAAf,SACE,cAACwG,EAAA,EAAD,CACE1G,QAAQ,UACRiG,KAAK,KACL/F,UAAU,OACVqC,QA1P2B,6CAsP7B,qGAS0B,IAA3BnB,EAAW6C,KAAK4C,QACf,eAACnE,EAAA,EAAD,CAAMxC,UAAU,OAAhB,UACE,cAACwC,EAAA,EAAKoE,OAAN,yDACA,cAACpE,EAAA,EAAKI,KAAN,UACE,cAAC,EAAD,CACE5C,UAAU,YACVkB,WAAYA,EAAW6C,eAOjC,eAAC8C,EAAA,EAAD,CACErD,KAAMA,EACNsD,OAAQlB,GACRmB,SAAS,SACTC,UAAU,EAJZ,UAME,cAACH,EAAA,EAAMD,OAAP,CAAcK,aAAW,EAAzB,SACE,cAACJ,EAAA,EAAMhE,MAAP,oFAEF,eAACgE,EAAA,EAAMjE,KAAP,WACE,eAACsE,EAAA,EAAD,WACE,cAAC,EAAD,CACEpH,QAAQ,UAERyC,MAAM,IACNF,QAAS8C,IAFL,KAIN,cAAC,EAAD,CACErF,QAAQ,UAERyC,MAAM,MACNF,QAAS8C,IAFL,KAIN,cAAC,EAAD,CACErF,QAAQ,UAERyC,MAAM,IACNF,QAAS8C,IAFL,QAKR,eAAC+B,EAAA,EAAD,WACE,cAAC,EAAD,CACEpH,QAAQ,UAERyC,MAAM,IACNF,QAAS8C,IAFL,KAIN,cAAC,EAAD,CACErF,QAAQ,UAERyC,MAAM,IACNF,QAAS8C,IAFL,KAIN,cAAC,EAAD,CACErF,QAAQ,UAERyC,MAAM,IACNF,QAAS8C,IAFL,QAKR,eAAC+B,EAAA,EAAD,WACE,cAAC,EAAD,CACEpH,QAAQ,UAERyC,MAAM,IACNF,QAAS8C,IAFL,KAIN,cAAC,EAAD,CACErF,QAAQ,UAERyC,MAAM,KACNF,QAAS8C,IAFL,KAIN,cAAC,EAAD,CACErF,QAAQ,UAERyC,MAAM,KACNF,QAAS8C,IAFL,QAKR,eAAC+B,EAAA,EAAD,WACE,cAAC,EAAD,CACEpH,QAAQ,UAERyC,MAAM,KACNF,QAAS8C,IAFL,MAIN,cAAC,EAAD,CACErF,QAAQ,UAERyC,MAAM,KACNF,QAAS8C,IAFL,MAIN,cAAC,EAAD,CACErF,QAAQ,UAERyC,MAAM,KACNF,QAAS8C,IAFL,YAMV,cAAC0B,EAAA,EAAMM,OAAP,UACE,cAACX,EAAA,EAAD,CAAQ1G,QAAQ,YAAYuC,QAASuD,GAArC,iE,wBC7WGwB,EAAY,SAAC7H,GAEtB,IAAIc,EAAW,GACXgE,GAAc,EAHc,EAKNnB,mBAAS,CAC/B7C,SAAU,GACVgE,aAAa,IAPe,mBAKzBR,EALyB,KAKlBC,EALkB,cAUjBuD,IAViB,2EAUhC,kCAAAhG,EAAA,6DACUyD,EAAU,CACZzE,SAAUwD,EAAMxD,SAChBgE,YAAaR,EAAMQ,aAH3B,SAKyB/C,MAAM,IAAK,CAC5BC,OAAQ,OACR0C,QAAS,CACL,eAAgB,kCAEpBc,KAAMC,KAAKC,UAAUH,KAV7B,cAKUwC,EALV,gBAYqCA,EAAOlD,OAZ5C,OAYUmD,EAZV,OAaU/F,EAAW,CACbnB,SAAUkH,EAAmB5G,KAC7Bc,iBAAiB,GAErBlC,EAAMmC,aAAaF,GAjBvB,4CAVgC,sBA2DhC,OACI,eAACqE,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAY9F,UAAU,OAAtB,SACI,cAACkG,EAAA,EAAD,CACAsB,YAAY,yFACZC,aAAW,WACXC,mBAAiB,eACjB3B,KAAK,KACLI,KAAK,OACL7F,GAAG,WACH+F,MAAOxC,EAAMxD,SACb+F,SAlCZ,SAAwBhF,GAEpBf,EAAWe,EAAMa,OAAOoE,MACxBvC,GAAS,SAAAQ,GACL,OAAO,2BACAA,GADP,IAEIjE,SAAUA,QA6BViG,QAzCZ,SAAoBlF,GACM,KAAlBA,EAAM8D,SACNmC,SA2CA,eAACM,EAAA,EAAD,CAAW3H,UAAU,OAArB,UACI,cAAC4H,EAAA,EAAD,CACAzB,KAAK,WACL7F,GAAG,cACH+F,MAAOxC,EAAMQ,YACb+B,SAhCZ,SAA2BhF,GAEvBiD,EAAcjD,EAAMa,OAAOoE,MAC3BvC,GAAS,SAAAQ,GACL,OAAO,2BACAA,GADP,IAEID,YAAaA,UA4Bb,cAACwD,EAAA,EAAD,CAAgBC,QAAQ,cAAxB,yHAEJ,cAAChC,EAAA,EAAD,CAAY9F,UAAU,OAAtB,SACI,cAACwG,EAAA,EAAD,CAAQ1G,QAAQ,UAAUuC,QAASgF,EAAnC,kDCvFHU,G,MAAM,SAACxI,GAEhB,IAMImB,GADY,IAAIsH,KACDC,IAAI,QACjBxG,OAA4BhC,IAATiB,EATC,EAWQwC,mBAAS,CACvCzB,gBAAiBA,EACjB4C,YAAa5C,EAAkBf,EAAK2D,iBAAc5E,EAClDY,SAAUoB,EAAkBf,EAAKC,UAAOlB,IAdlB,mBAWnByI,EAXmB,KAWRxG,EAXQ,KAiB1B,OACI,qBAAK1B,UAAU,WAAWgB,MAhBhB,CACVmH,SAAU,QACVC,UAAW,SAcX,SACKF,EAAUzG,gBACP,cAAC,EAAD,CAAcC,aAAcA,IAIxB,cAAC,EAAD,CAAWA,aAAcA,QCnBzB2G,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1E,GACLD,QAAQC,MAAMA,EAAM2E,c","file":"static/js/main.449ba282.chunk.js","sourcesContent":["import React from 'react';\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\n\r\nexport const User = (props) => {\r\n\r\n  var badge = undefined\r\n  if (!props.markVisible & props.itsMe & props.mark !== undefined) {\r\n    badge = <Badge variant=\"secondary\" pill className=\"mt-1\">{props.mark}</Badge>\r\n  } else if (props.markVisible) {\r\n    badge = <Badge variant=\"primary\" pill className=\"mt-1\">{props.mark}</Badge>\r\n  }\r\n\r\n  return (\r\n    <ListGroup.Item key={props.id} display=\"flex\" align=\"items-center\" className=\"justify-content-between\"\r\n      variant={(  props.mark !== undefined ? \"success\" : \"\")}>\r\n        <div className=\"d-flex justify-content-between\">\r\n          {props.userName}\r\n          {badge !== undefined && badge}\r\n        </div>\r\n    </ListGroup.Item>\r\n  )\r\n}","// Представляет список активных пользователей.\r\nimport React from \"react\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { User } from \"./User\";\r\n\r\nexport const UserList = (props) => {\r\n  return (\r\n    <ListGroup className=\"my-2\">\r\n      {props.users.map((user) => (\r\n        <User\r\n          key={user.id}\r\n          id={user.id}\r\n          userName={user.name}\r\n          mark={user.mark}\r\n          markVisible={props.marksVisible}\r\n          itsMe={props.currentUserName === user.name}\r\n        ></User>\r\n      ))}\r\n    </ListGroup>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nexport const Spectator = (props) => {\r\n\r\n  return (\r\n    <ListGroup.Item key={props.id} display=\"flex\" align=\"items-center\" className=\"py-1 justify-content-between\" variant=\"light\">\r\n        <div className=\"d-flex justify-content-between\">\r\n          {props.userName}\r\n        </div>\r\n    </ListGroup.Item>\r\n  )\r\n}","// Представляет список активных пользователей.\r\nimport React from \"react\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { Spectator } from \"./Spectator\";\r\n\r\nexport const SpectatorList = (props) => {\r\n  return (\r\n    <ListGroup style={{fontSize: '.8rem'}}>\r\n      {props.spectators.map((user) => (\r\n        <Spectator\r\n          key={user.id}\r\n          id={user.id}\r\n          userName={user.name}\r\n        //   itsMe={props.currentUserName === user.name}\r\n        ></Spectator>\r\n      ))}\r\n    </ListGroup>\r\n  );\r\n};\r\n","import React from 'react'\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n\r\nexport const NavigationBar = (props) => {\r\n\r\n  async function logoutClick(event) {\r\n    const url = '/logOut'\r\n    await fetch(url, { method: 'POST' })\r\n    // Процедура, переданная из самого корня.\r\n    const userData = {\r\n      userName: undefined,\r\n      isAuthenticated: false\r\n    }\r\n    props.setAuthState(userData)\r\n  }\r\n\r\n  async function fullReset(event) {\r\n    const url = '/fullReset'\r\n    await fetch(url, { method: 'POST' })\r\n  }\r\n  \r\n  return (\r\n    <Navbar expand=\"lg\" bg=\"light\">\r\n      <Navbar.Brand href=\"#\">\r\n        {props.userName}\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle target=\"#navbarSupportedContent\" />\r\n      <Navbar.Collapse id=\"navbarSupportedContent\">\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link href=\"#\" onClick={logoutClick}>Разлогиниться</Nav.Link>\r\n          <Nav.Link href=\"#\" onClick={fullReset}>Полный сброс</Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  )\r\n\r\n}\r\n","import React from 'react';\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nexport const PokerCard = (props) => {\r\n\r\n    async function onClick() {\r\n        await props.onClick(props.title)\r\n      }\r\n\r\n    return (\r\n        <Card \r\n        className=\"my-2 text-center\"\r\n        bg={props.variant.toLowerCase()}\r\n        key={props.key}\r\n        // variant=\"top\"\r\n        text={props.variant.toLowerCase() === \"light\" ? \"dark\" : \"white\"}\r\n        style={{ width: \"18rem\" }}\r\n        onClick={onClick}\r\n        >\r\n        {/* <Card.Header>Header</Card.Header> */}\r\n        <Card.Body>\r\n            <Card.Title className=\"align-middle\"\r\n            style={{ fontSize: '2rem' }}>{props.title}</Card.Title>\r\n            {/* <Card.Text>\r\n                {props.as}\r\n            </Card.Text> */}\r\n        </Card.Body>\r\n        </Card>\r\n       )\r\n    }\r\n       \r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport { UserList } from \"./UserList\";\r\nimport { SpectatorList } from \"./SpectatorList\";\r\nimport { NavigationBar } from \"./NavigationBar\";\r\nimport { PokerCard } from \"./PokerCard\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport CardDeck from \"react-bootstrap/CardDeck\";\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nexport const PlanningPage = (props) => {\r\n  const intervalID = useRef(undefined);\r\n\r\n  // Стейт текущего пользователя.\r\n  const [userState, setUserState] = useState({\r\n    user: {}, // name, isSpectator\r\n  });\r\n\r\n  // Оценка, которая была отправлена на сервер. При изменении обязательно должна\r\n  // отправиться на сервер.\r\n  const [mark, setMark] = useState(undefined);\r\n\r\n  // Оценка, которая изменяется в поле ввода, но не обязательно отправлялась на сервер.\r\n  const [markClient, setMarkClient] = useState(undefined);\r\n\r\n  // Показывается ли в текущий момент модальное окно выбора оценки.\r\n  const [show, setShow] = useState(false);\r\n\r\n  const [marksVisible, setMarksVisible] = useState(false);\r\n\r\n  const [state, setState] = useState({\r\n    users: [], // Пользователи со всеми данными.\r\n    spectators: [], // Зрители со всеми данными.\r\n    userIDs: [], // Просто массив идентификаторов пользователей\r\n    spectatorIDs: [], // Просто массив идентификаторов зрителей\r\n    marksVisible: false, // Оценки вскрыты?\r\n  });\r\n\r\n  const [spectators, setSpectators] = useState({ list: [] });\r\n\r\n  useEffect(() => {\r\n    // Запрашиваем с сервера, как он видит текущего пользователя.\r\n    // Устанавливаем обработчик ожидания tick.\r\n    getUserData();\r\n    return () => {\r\n      clearInterval(intervalID.current);\r\n    };\r\n  }, [props]);\r\n\r\n  useEffect(() => {\r\n    // undefined - это когда происходит очистка оценок.\r\n    if (mark !== undefined) {\r\n      sendMark();\r\n    }\r\n  }, [mark]);\r\n\r\n  useEffect(() => {\r\n    // console.log(\"useEffect markClient\")\r\n  }, [markClient]);\r\n\r\n  // Возникает, когда на сервере меняется таблица пользователей.\r\n  useEffect(() => {\r\n    // console.log(\"useEffect state \", state)\r\n\r\n    var myUserDataOnServer = state.users.find(\r\n      (us) => us.name === userState.user.name\r\n    );\r\n    if (\r\n      myUserDataOnServer !== undefined &&\r\n      myUserDataOnServer.mark === undefined &&\r\n      mark !== undefined\r\n    ) {\r\n      setMark(undefined);\r\n    }\r\n\r\n    // if (marksVisible === false) {\r\n    //   setMark(undefined)\r\n    // }\r\n  }, [state]);\r\n\r\n  async function getUserData() {\r\n    try {\r\n      const url = \"/getUserData\";\r\n      const response = await fetch(url, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      });\r\n      const json = await response.json();\r\n      const user = {\r\n        name: json.user,\r\n        isSpectator: json.isSpectator,\r\n      };\r\n      setUserState((prev) => {\r\n        return {\r\n          ...prev,\r\n          user: user,\r\n        };\r\n      });\r\n      await tick();\r\n      intervalID.current = setInterval(tick, 2000);\r\n    } catch (error) {\r\n      console.error(\"Ошибка:\", error);\r\n    }\r\n  }\r\n\r\n  // Глобальный клиентский тик.\r\n  async function tick() {\r\n    try {\r\n      const url = \"/tick\";\r\n      const response = await fetch(url);\r\n      const responseData = await response.json();\r\n      setState((prev) => {\r\n        return {\r\n          ...prev,\r\n          users: responseData.users,\r\n        };\r\n      });\r\n      setSpectators((prev) => {\r\n        return {\r\n          ...prev,\r\n          list: responseData.spectators,\r\n        };\r\n      });\r\n      setMarksVisible(responseData.marksVisible);\r\n    } catch (error) {\r\n      console.error(\"Ошибка:\", error);\r\n    }\r\n  }\r\n\r\n  function markChange(event) {\r\n    var mark_temp = event.target.value;\r\n    setMarkClient(mark_temp);\r\n  }\r\n\r\n  async function sendMark() {\r\n    try {\r\n      // console.log(\"sendMark()\")\r\n      const url = \"/sendMark\";\r\n      const reqBody = {\r\n        user: userState.user.name,\r\n        mark: markClient, // на сервер отправляем клиентскую оценку.\r\n      };\r\n      // console.log(reqBody)\r\n      const response = await fetch(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json;charset=utf-8\",\r\n        },\r\n        body: JSON.stringify(reqBody),\r\n      });\r\n      await response.text();\r\n      await tick();\r\n    } catch (error) {\r\n      console.error(\"Ошибка:\", error);\r\n    }\r\n  }\r\n\r\n  async function markKeyUp(event) {\r\n    if (event.keyCode === 13) {\r\n      sendMark();\r\n    }\r\n  }\r\n\r\n  async function openClick(event) {\r\n    try {\r\n      const url = \"/showMarks\";\r\n      await fetch(url, { method: \"POST\" });\r\n      tick();\r\n    } catch (error) {\r\n      console.error(\"Ошибка:\", error);\r\n    }\r\n  }\r\n\r\n  async function clearMarksClick(event) {\r\n    try {\r\n      const url = \"/clearMarks\";\r\n      await fetch(url, { method: \"POST\" });\r\n      tick();\r\n    } catch (error) {\r\n      console.error(\"Ошибка:\", error);\r\n    }\r\n  }\r\n\r\n  async function markSelect(event) {\r\n    try {\r\n      setShow(true);\r\n    } catch (error) {\r\n      console.error(\"Ошибка:\", error);\r\n    }\r\n  }\r\n\r\n  async function modalOnSelect(selectedValue) {\r\n    setShow(false);\r\n\r\n    var mark_temp = selectedValue;\r\n    setMarkClient(mark_temp);\r\n    setMark(mark_temp); // Сразу будет отправлено.\r\n  }\r\n\r\n  async function changeMark() {\r\n    await setMark(markClient);\r\n  }\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  return (\r\n    <div bg=\"light\">\r\n      <NavigationBar\r\n        userName={userState.user.name}\r\n        setAuthState={props.setAuthState}\r\n      />\r\n      <Container>\r\n        <InputGroup className=\"my-2\" size=\"lg\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Оценка</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <FormControl\r\n            type=\"number\"\r\n            onChange={markChange}\r\n            onKeyUp={markKeyUp}\r\n            value={markClient || \"\"}\r\n          />\r\n          <InputGroup.Append>\r\n            <Button id=\"basic-addon2\" variant=\"secondary\" onClick={markSelect}>\r\n              . . .\r\n            </Button>\r\n          </InputGroup.Append>\r\n        </InputGroup>\r\n        <Button\r\n          variant=\"primary\"\r\n          size=\"lg\"\r\n          className=\"my-2\"\r\n          onClick={changeMark}\r\n        >\r\n          Отправить\r\n        </Button>\r\n        <UserList\r\n          users={state.users}\r\n          marksVisible={marksVisible}\r\n          currentUserName={userState.user.name}\r\n        />\r\n        <Image\r\n          className=\"my-2\"\r\n          src={marksVisible ? \"eye.svg\" : \"eye-slash.svg\"}\r\n          // width=\"24\"\r\n          // height=\"24\"\r\n        />\r\n        <div className=\"pt-2\">\r\n          <Button variant=\"success\" size=\"lg\" onClick={openClick}>\r\n            Вскрываемся\r\n          </Button>\r\n        </div>\r\n        <div className=\"my-2\">\r\n          <Button\r\n            variant=\"warning\"\r\n            size=\"lg\"\r\n            className=\"my-2\"\r\n            onClick={clearMarksClick}\r\n          >\r\n            Очистить оценки\r\n          </Button>\r\n        </div>\r\n        {spectators.list.length !== 0 && (\r\n          <Card className=\"my-4\">\r\n            <Card.Header>Зрители</Card.Header>\r\n            <Card.Body>\r\n              <SpectatorList\r\n                className=\"my-2 px-2\"\r\n                spectators={spectators.list}\r\n              />\r\n            </Card.Body>\r\n          </Card>\r\n        )}\r\n      </Container>\r\n\r\n      <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Выбор оценки</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <CardDeck>\r\n            <PokerCard\r\n              variant=\"primary\"\r\n              key=\"1\"\r\n              title=\"0\"\r\n              onClick={modalOnSelect}\r\n            />\r\n            <PokerCard\r\n              variant=\"primary\"\r\n              key=\"2\"\r\n              title=\"0.5\"\r\n              onClick={modalOnSelect}\r\n            />\r\n            <PokerCard\r\n              variant=\"primary\"\r\n              key=\"3\"\r\n              title=\"1\"\r\n              onClick={modalOnSelect}\r\n            />\r\n          </CardDeck>\r\n          <CardDeck>\r\n            <PokerCard\r\n              variant=\"primary\"\r\n              key=\"4\"\r\n              title=\"2\"\r\n              onClick={modalOnSelect}\r\n            />\r\n            <PokerCard\r\n              variant=\"primary\"\r\n              key=\"5\"\r\n              title=\"3\"\r\n              onClick={modalOnSelect}\r\n            />\r\n            <PokerCard\r\n              variant=\"primary\"\r\n              key=\"6\"\r\n              title=\"5\"\r\n              onClick={modalOnSelect}\r\n            />\r\n          </CardDeck>\r\n          <CardDeck>\r\n            <PokerCard\r\n              variant=\"primary\"\r\n              key=\"7\"\r\n              title=\"8\"\r\n              onClick={modalOnSelect}\r\n            />\r\n            <PokerCard\r\n              variant=\"primary\"\r\n              key=\"8\"\r\n              title=\"13\"\r\n              onClick={modalOnSelect}\r\n            />\r\n            <PokerCard\r\n              variant=\"primary\"\r\n              key=\"9\"\r\n              title=\"21\"\r\n              onClick={modalOnSelect}\r\n            />\r\n          </CardDeck>\r\n          <CardDeck>\r\n            <PokerCard\r\n              variant=\"primary\"\r\n              key=\"10\"\r\n              title=\"34\"\r\n              onClick={modalOnSelect}\r\n            />\r\n            <PokerCard\r\n              variant=\"primary\"\r\n              key=\"11\"\r\n              title=\"55\"\r\n              onClick={modalOnSelect}\r\n            />\r\n            <PokerCard\r\n              variant=\"primary\"\r\n              key=\"12\"\r\n              title=\"89\"\r\n              onClick={modalOnSelect}\r\n            />\r\n          </CardDeck>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Закрыть\r\n          </Button>\r\n          {/* <Button variant=\"primary\">Выбрать</Button> */}\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport Container from \"react-bootstrap/Container\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport FormCheck from \"react-bootstrap/FormCheck\";\r\nimport FormCheckInput from \"react-bootstrap/FormCheckInput\";\r\nimport FormCheckLabel from \"react-bootstrap/FormCheckLabel\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport const LoginForm = (props) => {\r\n\r\n    var userName = \"\"\r\n    var isSpectator = false\r\n\r\n    const [state, setState] = useState({\r\n        userName: \"\",\r\n        isSpectator: false\r\n    });\r\n\r\n    async function loginclick() {\r\n        const reqBody = {\r\n            userName: state.userName,\r\n            isSpectator: state.isSpectator\r\n        }\r\n        const result = await fetch(\"/\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify(reqBody)\r\n        })\r\n        const userDataFromServer = await result.json()\r\n        const userData = {\r\n            userName: userDataFromServer.name,\r\n            isAuthenticated: true\r\n        }\r\n        props.setAuthState(userData)\r\n    }\r\n\r\n    function loginKeyUp(event) {\r\n        if (event.keyCode === 13) {\r\n            loginclick()\r\n        }\r\n    }\r\n\r\n    function userNameChange(event) {\r\n\r\n        userName = event.target.value\r\n        setState(prev => {\r\n            return {\r\n                ...prev,\r\n                userName: userName\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    function isSpectatorChange(event) {\r\n\r\n        isSpectator = event.target.value\r\n        setState(prev => {\r\n            return {\r\n                ...prev,\r\n                isSpectator: isSpectator\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <InputGroup className=\"mb-3\">\r\n                <FormControl\r\n                placeholder=\"Введите ваше имя\"\r\n                aria-label=\"Username\"\r\n                aria-describedby=\"basic-addon1\"\r\n                size=\"lg\"\r\n                type=\"text\"\r\n                id=\"userName\"\r\n                value={state.userName}\r\n                onChange={userNameChange}\r\n                onKeyUp={loginKeyUp}\r\n                />\r\n            </InputGroup>\r\n\r\n            <FormCheck className=\"mb-3\">\r\n                <FormCheckInput\r\n                type=\"checkbox\"\r\n                id=\"isSpectator\"\r\n                value={state.isSpectator}\r\n                onChange={isSpectatorChange}\r\n                />\r\n                <FormCheckLabel htmlFor=\"isSpectator\">Я только посмотреть</FormCheckLabel>\r\n            </FormCheck>\r\n            <InputGroup className=\"mb-3\">\r\n                <Button variant=\"primary\" onClick={loginclick}>Войти</Button>\r\n            </InputGroup>\r\n            {/* <InputGroup>\r\n                <label htmlFor=\"userName\">Введите ваше имя</label>\r\n            </InputGroup>\r\n            <InputGroup className=\"mb-3\">\r\n                <Form.Input size=\"lg\" type=\"text\" id=\"userName\" value={state.userName} onChange={userNameChange}\r\n                    onKeyUp={loginKeyUp} placeholder=\"Имя пользователя\" />\r\n            </InputGroup>\r\n            <FormCheck className=\"mb-3\">\r\n                <Form.CheckInput type=\"checkbox\" id=\"isSpectator\" value={state.isSpectator} onChange={isSpectatorChange} />\r\n                <Form.CheckLabel htmlFor=\"isSpectator\">Я только посмотреть</Form.CheckLabel>\r\n            </FormCheck>\r\n            <InputGroup className=\"mb-3\">\r\n                <Button variant=\"primary\" onClick={loginclick}>Войти</Button>\r\n            </InputGroup> */}\r\n        </Container >\r\n    )\r\n\r\n}","import React, { useState } from 'react'\r\nimport Cookies from 'universal-cookie'\r\nimport { PlanningPage } from './components/PlanningPage'\r\nimport { LoginForm } from './components/LoginForm'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n// import './darktheme.css';\r\n\r\nexport const App = (props) => {\r\n\r\n    const style = {\r\n        minWidth: '100vw',\r\n        minHeight: '100vh'\r\n    }\r\n\r\n    const cookies = new Cookies();\r\n    var user = cookies.get(\"user\")\r\n    const isAuthenticated = (user !== undefined)\r\n\r\n    const [AuthState, setAuthState] = useState({\r\n        isAuthenticated: isAuthenticated,\r\n        isSpectator: isAuthenticated ? user.isSpectator : undefined,\r\n        userName: isAuthenticated ? user.name : undefined\r\n    })\r\n\r\n    return (\r\n        <div className=\"bg-light\" style={style}>\r\n            {AuthState.isAuthenticated ? (\r\n                <PlanningPage setAuthState={setAuthState} />\r\n            )\r\n                :\r\n                (\r\n                    <LoginForm setAuthState={setAuthState} />\r\n                )}\r\n        </div>\r\n    )\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}