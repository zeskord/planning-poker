{"version":3,"sources":["components/User.js","components/UserList.js","components/NavigationBar.js","components/PokerCard.js","components/PlanningPage.js","components/LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["User","props","badge","undefined","markVisible","itsMe","mark","Badge","variant","pill","className","ListGroup","Item","display","align","userName","id","UserList","users","map","user","name","marksVisible","currentUserName","NavigationBar","event","a","fetch","method","userData","isAuthenticated","setAuthState","Navbar","expand","bg","Brand","href","Toggle","target","Collapse","Nav","Link","onClick","PokerCard","title","Card","toLowerCase","text","style","width","Body","Title","fontSize","key","PlanningPage","intervalID","useRef","useState","userState","setUserState","setMark","markClient","setMarkClient","show","setShow","setMarksVisible","spectators","userIDs","spectatorIDs","state","setState","headers","Accept","response","json","isSpectator","prev","tick","current","setInterval","console","error","responseData","sendMark","reqBody","body","JSON","stringify","keyCode","modalOnSelect","selectedValue","mark_temp","useEffect","getUserData","clearInterval","myUserDataOnServer","find","us","handleClose","Container","InputGroup","size","Prepend","Text","FormControl","type","onChange","value","onKeyUp","Append","Button","Image","src","Modal","onHide","backdrop","keyboard","Header","closeButton","CardDeck","Footer","LoginForm","loginclick","result","userDataFromServer","placeholder","aria-label","aria-describedby","FormCheck","FormCheckInput","FormCheckLabel","htmlFor","App","Cookies","get","AuthState","minWidth","minHeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b35eb3fe.chunk.js","sourcesContent":["import React from 'react';\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\n\r\nexport const User = (props) => {\r\n\r\n  var badge = undefined\r\n  if (!props.markVisible & props.itsMe & props.mark !== undefined) {\r\n    badge = <Badge variant=\"secondary\" pill className=\"mt-1\">{props.mark}</Badge>\r\n  } else if (props.markVisible) {\r\n    badge = <Badge variant=\"primary\" pill className=\"mt-1\">{props.mark}</Badge>\r\n  }\r\n\r\n  return (\r\n    <ListGroup.Item key={props.id} display=\"flex\" align=\"items-center\" className=\"justify-content-between\"\r\n      variant={(  props.mark !== undefined ? \"success\" : \"\")}>\r\n        <div className=\"d-flex justify-content-between\">\r\n          {props.userName}\r\n          {badge !== undefined && badge}\r\n        </div>\r\n    </ListGroup.Item>\r\n  )\r\n}","// Представляет список активных пользователей.\r\nimport React from 'react';\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { User } from './User'\r\n\r\nexport const UserList = (props) => {\r\n\r\n  return (\r\n    <ListGroup className=\"my-2\">\r\n      {props.users.map(user => (\r\n        <User key={user.id} id={user.id} userName={user.name} mark={user.mark} markVisible={props.marksVisible}\r\n          itsMe={props.currentUserName === user.name}></User>\r\n      ))}\r\n    </ListGroup>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n\r\nexport const NavigationBar = (props) => {\r\n\r\n  async function logoutClick(event) {\r\n    const url = '/logOut'\r\n    await fetch(url, { method: 'POST' })\r\n    // Процедура, переданная из самого корня.\r\n    const userData = {\r\n      userName: undefined,\r\n      isAuthenticated: false\r\n    }\r\n    props.setAuthState(userData)\r\n  }\r\n\r\n  async function fullReset(event) {\r\n    const url = '/fullReset'\r\n    await fetch(url, { method: 'POST' })\r\n  }\r\n  \r\n  return (\r\n    <Navbar expand=\"lg\" bg=\"light\">\r\n      <Navbar.Brand href=\"#\">\r\n        {props.userName}\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle target=\"#navbarSupportedContent\" />\r\n      <Navbar.Collapse id=\"navbarSupportedContent\">\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link href=\"#\" onClick={logoutClick}>Разлогиниться</Nav.Link>\r\n          <Nav.Link href=\"#\" onClick={fullReset}>Полный сброс</Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  )\r\n\r\n}\r\n","import React from 'react';\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nexport const PokerCard = (props) => {\r\n\r\n    async function onClick() {\r\n        await props.onClick(props.title)\r\n      }\r\n\r\n    return (\r\n        <Card \r\n        className=\"my-2 text-center\"\r\n        bg={props.variant.toLowerCase()}\r\n        key={props.key}\r\n        // variant=\"top\"\r\n        text={props.variant.toLowerCase() === \"light\" ? \"dark\" : \"white\"}\r\n        style={{ width: \"18rem\" }}\r\n        onClick={onClick}\r\n        >\r\n        {/* <Card.Header>Header</Card.Header> */}\r\n        <Card.Body>\r\n            <Card.Title className=\"align-middle\"\r\n            style={{ fontSize: '2rem' }}>{props.title}</Card.Title>\r\n            {/* <Card.Text>\r\n                {props.as}\r\n            </Card.Text> */}\r\n        </Card.Body>\r\n        </Card>\r\n       )\r\n    }\r\n       \r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport { UserList } from \"./UserList\";\r\nimport { NavigationBar } from \"./NavigationBar\";\r\nimport { PokerCard } from \"./PokerCard\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport CardDeck from \"react-bootstrap/CardDeck\";\r\n\r\nexport const PlanningPage = (props) => {\r\n  const intervalID = useRef(undefined);\r\n\r\n  // Стейт текущего пользователя.\r\n  const [userState, setUserState] = useState({\r\n    user: {}, // name, isSpectator\r\n  });\r\n\r\n  // Оценка, которая была отправлена на сервер. При изменении обязательно должна\r\n  // отправиться на сервер.\r\n  const [mark, setMark] = useState(undefined);\r\n\r\n  // Оценка, которая изменяется в поле ввода, но не обязательно отправлялась на сервер.\r\n  const [markClient, setMarkClient] = useState(undefined)\r\n\r\n  // Показывается ли в текущий момент модальное окно выбора оценки.\r\n  const [show, setShow] = useState(false);\r\n\r\n  const [marksVisible, setMarksVisible] = useState(false)\r\n\r\n  const [state, setState] = useState({\r\n    users: [], // Пользователи со всеми данными.\r\n    spectators: [], // Зрители со всеми данными.\r\n    userIDs: [], // Просто массив идентификаторов пользователей\r\n    spectatorIDs: [], // Просто массив идентификаторов зрителей\r\n    marksVisible: false, // Оценки вскрыты?\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Запрашиваем с сервера, как он видит текущего пользователя.\r\n    // Устанавливаем обработчик ожидания tick.\r\n    getUserData();\r\n    return () => {\r\n      clearInterval(intervalID.current);\r\n    };\r\n  }, [props]);\r\n\r\n  useEffect(() => {\r\n    // undefined - это когда происходит очистка оценок.\r\n    if (mark !== undefined) {\r\n      sendMark()\r\n    }\r\n  }, [mark]);\r\n\r\n  useEffect(() => {\r\n    // console.log(\"useEffect markClient\")\r\n  }, [markClient]);\r\n\r\n  // Возникает, когда на сервере меняется таблица пользователей.\r\n  useEffect(() => {\r\n    // console.log(\"useEffect state \", state)\r\n\r\n    var myUserDataOnServer = state.users.find(us => us.name === userState.user.name)\r\n    if ((myUserDataOnServer !== undefined)\r\n      &&(myUserDataOnServer.mark === undefined)\r\n      &&(mark !== undefined)) {\r\n      setMark(undefined)\r\n    }\r\n    \r\n    // if (marksVisible === false) {\r\n    //   setMark(undefined)\r\n    // }\r\n  }, [state]);\r\n\r\n  async function getUserData() {\r\n    try {\r\n      const url = \"/getUserData\";\r\n      const response = await fetch(url, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      });\r\n      const json = await response.json();\r\n      const user = {\r\n        name: json.user,\r\n        isSpectator: json.isSpectator,\r\n      };\r\n      setUserState((prev) => {\r\n        return {\r\n          ...prev,\r\n          user: user,\r\n        };\r\n      });\r\n      await tick();\r\n      intervalID.current = setInterval(tick, 2000);\r\n    } catch (error) {\r\n      console.error(\"Ошибка:\", error);\r\n    }\r\n  }\r\n\r\n  // Глобальный клиентский тик.\r\n  async function tick() {\r\n    try {\r\n      const url = \"/tick\";\r\n      const response = await fetch(url);\r\n      const responseData = await response.json();\r\n      setState((prev) => {\r\n        return {\r\n          ...prev,\r\n          users: responseData.users,\r\n          spectators: responseData.spectators,\r\n          marksVisible: responseData.marksVisible,\r\n        };\r\n      });\r\n      // console.log(\"tick marksVisible\", responseData.marksVisible)\r\n      setMarksVisible(responseData.marksVisible)\r\n    } catch (error) {\r\n      console.error(\"Ошибка:\", error);\r\n    }\r\n  }\r\n\r\n  function markChange(event) {\r\n    var mark_temp = event.target.value;\r\n    setMarkClient(mark_temp);\r\n  }\r\n\r\n  async function sendMark() {\r\n    try {\r\n      // console.log(\"sendMark()\")\r\n      const url = \"/sendMark\";\r\n      const reqBody = {\r\n        user: userState.user.name,\r\n        mark: markClient, // на сервер отправляем клиентскую оценку.\r\n      };\r\n      // console.log(reqBody)\r\n      const response = await fetch(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json;charset=utf-8\",\r\n        },\r\n        body: JSON.stringify(reqBody),\r\n      });\r\n      await response.text();\r\n      await tick();\r\n    } catch (error) {\r\n      console.error(\"Ошибка:\", error);\r\n    }\r\n  }\r\n\r\n  async function markKeyUp(event) {\r\n    if (event.keyCode === 13) {\r\n      sendMark();\r\n    }\r\n  }\r\n\r\n  async function openClick(event) {\r\n    try {\r\n      const url = \"/showMarks\";\r\n      await fetch(url, { method: \"POST\" });\r\n      tick();\r\n    } catch (error) {\r\n      console.error(\"Ошибка:\", error);\r\n    }\r\n  }\r\n\r\n  async function clearMarksClick(event) {\r\n    try {\r\n      const url = \"/clearMarks\";\r\n      await fetch(url, { method: \"POST\" });\r\n      tick();\r\n    } catch (error) {\r\n      console.error(\"Ошибка:\", error);\r\n    }\r\n  }\r\n\r\n  async function markSelect(event) {\r\n    try {\r\n      setShow(true);\r\n    } catch (error) {\r\n      console.error(\"Ошибка:\", error);\r\n    }\r\n  }\r\n\r\n  async function modalOnSelect(selectedValue) {\r\n    setShow(false)\r\n    \r\n    var mark_temp = selectedValue;\r\n    setMarkClient(mark_temp)\r\n    setMark(mark_temp) // Сразу будет отправлено.\r\n  }  \r\n\r\n  async function changeMark() {\r\n    await setMark(markClient)\r\n  }\r\n\r\n  \r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  return (\r\n    <div bg=\"light\">\r\n      <NavigationBar\r\n        userName={userState.user.name}\r\n        setAuthState={props.setAuthState}\r\n      />\r\n      <Container>\r\n        <InputGroup className=\"my-2\" size=\"lg\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Оценка</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <FormControl\r\n            type=\"number\"\r\n            onChange={markChange}\r\n            onKeyUp={markKeyUp}\r\n            value={markClient||''}\r\n          />\r\n          <InputGroup.Append>\r\n            <Button\r\n              id=\"basic-addon2\"\r\n              variant=\"secondary\"\r\n              onClick={markSelect}\r\n            >\r\n              . . .\r\n            </Button>\r\n          </InputGroup.Append>\r\n        </InputGroup>\r\n        <Button\r\n          variant=\"primary\"\r\n          size=\"lg\"\r\n          className=\"my-2\"\r\n          onClick={changeMark}\r\n        >\r\n          Отправить\r\n        </Button>\r\n        <UserList\r\n          users={state.users}\r\n          marksVisible={marksVisible}\r\n          currentUserName={userState.user.name}\r\n        />\r\n        <Image\r\n          className=\"my-2\"\r\n          src={marksVisible ? \"eye.svg\" : \"eye-slash.svg\"}\r\n          // width=\"24\"\r\n          // height=\"24\"\r\n        />\r\n        <div className=\"pt-2\">\r\n          <Button variant=\"success\" size=\"lg\" onClick={openClick}>\r\n            Вскрываемся\r\n          </Button>\r\n        </div>\r\n        <div className=\"my-2\">\r\n          <Button\r\n            variant=\"warning\"\r\n            size=\"lg\"\r\n            className=\"my-2\"\r\n            onClick={clearMarksClick}\r\n          >\r\n            Очистить оценки\r\n          </Button>\r\n        </div>\r\n      </Container>\r\n      \r\n      <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Выбор оценки</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <CardDeck>\r\n            <PokerCard variant=\"primary\" key=\"1\" title = \"0\" onClick={modalOnSelect}/>\r\n            <PokerCard variant=\"primary\" key=\"2\" title = \"0.5\" onClick={modalOnSelect}/>\r\n            <PokerCard variant=\"primary\" key=\"3\" title = \"1\"  onClick={modalOnSelect}/>\r\n          </CardDeck>\r\n          <CardDeck>\r\n            <PokerCard variant=\"primary\" key=\"4\" title = \"2\" onClick={modalOnSelect}/>\r\n            <PokerCard variant=\"primary\" key=\"5\" title = \"3\" onClick={modalOnSelect}/>\r\n            <PokerCard variant=\"primary\" key=\"6\" title = \"5\" onClick={modalOnSelect}/>\r\n          </CardDeck>\r\n          <CardDeck>\r\n            <PokerCard variant=\"primary\" key=\"7\" title = \"8\" onClick={modalOnSelect}/>\r\n            <PokerCard variant=\"primary\" key=\"8\" title = \"13\" onClick={modalOnSelect}/>\r\n            <PokerCard variant=\"primary\" key=\"9\" title = \"21\" onClick={modalOnSelect}/>\r\n          </CardDeck>\r\n          <CardDeck>\r\n            <PokerCard variant=\"primary\" key=\"10\" title = \"34\" onClick={modalOnSelect}/>\r\n            <PokerCard variant=\"primary\" key=\"11\" title = \"55\" onClick={modalOnSelect}/>\r\n            <PokerCard variant=\"primary\" key=\"12\" title = \"89\" onClick={modalOnSelect}/>\r\n          </CardDeck>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Закрыть\r\n          </Button>\r\n          {/* <Button variant=\"primary\">Выбрать</Button> */}\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport Container from \"react-bootstrap/Container\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport FormCheck from \"react-bootstrap/FormCheck\";\r\nimport FormCheckInput from \"react-bootstrap/FormCheckInput\";\r\nimport FormCheckLabel from \"react-bootstrap/FormCheckLabel\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport const LoginForm = (props) => {\r\n\r\n    var userName = \"\"\r\n    var isSpectator = false\r\n\r\n    const [state, setState] = useState({\r\n        userName: \"\",\r\n        isSpectator: false\r\n    });\r\n\r\n    async function loginclick() {\r\n        const reqBody = {\r\n            userName: state.userName,\r\n            isSpectator: state.isSpectator\r\n        }\r\n        const result = await fetch(\"/\", {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify(reqBody)\r\n        })\r\n        const userDataFromServer = await result.json()\r\n        const userData = {\r\n            userName: userDataFromServer.name,\r\n            isAuthenticated: true\r\n        }\r\n        props.setAuthState(userData)\r\n    }\r\n\r\n    function loginKeyUp(event) {\r\n        if (event.keyCode === 13) {\r\n            loginclick()\r\n        }\r\n    }\r\n\r\n    function userNameChange(event) {\r\n\r\n        userName = event.target.value\r\n        setState(prev => {\r\n            return {\r\n                ...prev,\r\n                userName: userName\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    function isSpectatorChange(event) {\r\n\r\n        isSpectator = event.target.value\r\n        setState(prev => {\r\n            return {\r\n                ...prev,\r\n                isSpectator: isSpectator\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <InputGroup className=\"mb-3\">\r\n                <FormControl\r\n                placeholder=\"Введите ваше имя\"\r\n                aria-label=\"Username\"\r\n                aria-describedby=\"basic-addon1\"\r\n                size=\"lg\"\r\n                type=\"text\"\r\n                id=\"userName\"\r\n                value={state.userName}\r\n                onChange={userNameChange}\r\n                onKeyUp={loginKeyUp}\r\n                />\r\n            </InputGroup>\r\n\r\n            <FormCheck className=\"mb-3\">\r\n                <FormCheckInput\r\n                type=\"checkbox\"\r\n                id=\"isSpectator\"\r\n                value={state.isSpectator}\r\n                onChange={isSpectatorChange}\r\n                />\r\n                <FormCheckLabel htmlFor=\"isSpectator\">Я только посмотреть</FormCheckLabel>\r\n            </FormCheck>\r\n            <InputGroup className=\"mb-3\">\r\n                <Button variant=\"primary\" onClick={loginclick}>Войти</Button>\r\n            </InputGroup>\r\n            {/* <InputGroup>\r\n                <label htmlFor=\"userName\">Введите ваше имя</label>\r\n            </InputGroup>\r\n            <InputGroup className=\"mb-3\">\r\n                <Form.Input size=\"lg\" type=\"text\" id=\"userName\" value={state.userName} onChange={userNameChange}\r\n                    onKeyUp={loginKeyUp} placeholder=\"Имя пользователя\" />\r\n            </InputGroup>\r\n            <FormCheck className=\"mb-3\">\r\n                <Form.CheckInput type=\"checkbox\" id=\"isSpectator\" value={state.isSpectator} onChange={isSpectatorChange} />\r\n                <Form.CheckLabel htmlFor=\"isSpectator\">Я только посмотреть</Form.CheckLabel>\r\n            </FormCheck>\r\n            <InputGroup className=\"mb-3\">\r\n                <Button variant=\"primary\" onClick={loginclick}>Войти</Button>\r\n            </InputGroup> */}\r\n        </Container >\r\n    )\r\n\r\n}","import React, { useState } from 'react'\r\nimport Cookies from 'universal-cookie'\r\nimport { PlanningPage } from './components/PlanningPage'\r\nimport { LoginForm } from './components/LoginForm'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n// import './darktheme.css';\r\n\r\nexport const App = (props) => {\r\n\r\n    const style = {\r\n        minWidth: '100vw',\r\n        minHeight: '100vh'\r\n    }\r\n\r\n    const cookies = new Cookies();\r\n    var user = cookies.get(\"user\")\r\n    const isAuthenticated = (user !== undefined)\r\n\r\n    const [AuthState, setAuthState] = useState({\r\n        isAuthenticated: isAuthenticated,\r\n        isSpectator: isAuthenticated ? user.isSpectator : undefined,\r\n        userName: isAuthenticated ? user.name : undefined\r\n    })\r\n\r\n    return (\r\n        <div className=\"bg-light\" style={style}>\r\n            {AuthState.isAuthenticated ? (\r\n                <PlanningPage setAuthState={setAuthState} />\r\n            )\r\n                :\r\n                (\r\n                    <LoginForm setAuthState={setAuthState} />\r\n                )}\r\n        </div>\r\n    )\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}